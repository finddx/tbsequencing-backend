# Generated by Django 4.1.5 on 2023-04-14 13:27

import datetime
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import django_fsm
import submission.models.attachment
import submission.util.storage


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("biosql", "0002_initial"),
        ("genphen", "0002_initial"),
        ("identity", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Package",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "submitted_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                    ),
                ),
                (
                    "state_changed_on",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("name", models.CharField(max_length=1024)),
                (
                    "description",
                    models.CharField(blank=True, max_length=8192, null=True),
                ),
                (
                    "state",
                    django_fsm.FSMField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PENDING", "Pending"),
                            ("ACCEPTED", "Accepted"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="DRAFT",
                        max_length=50,
                    ),
                ),
                ("origin", models.CharField(default="TBKB", max_length=1024)),
                ("bioproject_id", models.BigIntegerField(null=True)),
                (
                    "matching_state",
                    models.CharField(
                        choices=[
                            ("NEVER_MATCHED", "Never Matched"),
                            ("MATCHED", "Matched"),
                            ("CHANGED", "Changed"),
                        ],
                        default="NEVER_MATCHED",
                        max_length=32,
                    ),
                ),
                ("rejection_reason", models.TextField(default="", max_length=2048)),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="packages",
                        to="identity.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PackageSequencingData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("verdicts", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("filename", models.CharField(max_length=1024)),
                (
                    "package",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assoc_sequencing_datas",
                        to="submission.package",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Sample",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("biosample_id", models.IntegerField(null=True, unique=True)),
                (
                    "submission_date",
                    models.DateField(default=datetime.date.today, null=True),
                ),
                (
                    "sampling_date",
                    django.contrib.postgres.fields.ranges.DateRangeField(null=True),
                ),
                (
                    "additional_geographical_information",
                    models.CharField(max_length=8192, null=True),
                ),
                ("latitude", models.CharField(max_length=8192, null=True)),
                ("longitude", models.CharField(max_length=8192, null=True)),
                ("isolation_source", models.CharField(max_length=8192, null=True)),
                (
                    "bioanalysis_status",
                    models.CharField(
                        choices=[
                            ("Unprocessed", "Unprocessed"),
                            ("Processing", "Processing"),
                            ("Extracted", "Extracted"),
                            ("Failed to extract", "Failed To Extract"),
                            ("Uploaded to S3", "Uploaded To S3"),
                            ("Failed to upload", "Failed To Upload"),
                            ("Inserted", "Inserted"),
                            ("Annotated", "Annotated"),
                        ],
                        default="Unprocessed",
                        max_length=50,
                    ),
                ),
                ("bioanalysis_status_changed_at", models.DateField(null=True)),
                ("origin", models.CharField(default="", max_length=128)),
                (
                    "country",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="genphen.country",
                    ),
                ),
                (
                    "ncbi_taxon",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="biosql.taxon",
                        to_field="ncbi_taxon_id",
                    ),
                ),
                (
                    "package",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="samples",
                        to="submission.package",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SequencingData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "filename",
                    models.FileField(
                        null=True,
                        storage=submission.util.storage.FastqPermanentStorage(),
                        upload_to="",
                    ),
                ),
                ("file_size", models.BigIntegerField(null=True)),
                ("library_name", models.CharField(max_length=8192)),
                (
                    "file_path",
                    models.CharField(max_length=8192, null=True, unique=True),
                ),
                ("data_location", models.CharField(max_length=8192)),
                (
                    "library_preparation_strategy",
                    models.CharField(max_length=8192, null=True),
                ),
                ("dna_source", models.CharField(max_length=8192, null=True)),
                ("dna_selection", models.CharField(max_length=8192, null=True)),
                ("sequencing_platform", models.CharField(max_length=8192, null=True)),
                ("sequencing_machine", models.CharField(max_length=8192, null=True)),
                ("library_layout", models.CharField(max_length=8192, null=True)),
                ("assay", models.CharField(max_length=8192, null=True)),
                (
                    "packages",
                    models.ManyToManyField(
                        related_name="sequencing_datas",
                        through="submission.PackageSequencingData",
                        to="submission.package",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sequencing_data_set",
                        to="submission.sample",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Sequencing data",
            },
        ),
        migrations.CreateModel(
            name="TaxonomyStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.FloatField()),
                (
                    "ncbi_taxon",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="biosql.taxon",
                        to_field="ncbi_taxon_id",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="submission.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SummarySequencingStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("median_depth", models.FloatField()),
                ("coverage_10x", models.FloatField()),
                ("coverage_15x", models.FloatField()),
                ("coverage_20x", models.FloatField()),
                ("coverage_30x", models.FloatField()),
                ("raw_total_sequences", models.BigIntegerField()),
                ("filtered_sequences", models.BigIntegerField()),
                ("sequences", models.BigIntegerField()),
                ("is_sorted", models.BigIntegerField()),
                ("first_fragments", models.BigIntegerField()),
                ("last_fragments", models.BigIntegerField()),
                ("reads_mapped", models.BigIntegerField()),
                ("reads_mapped_and_paired", models.BigIntegerField()),
                ("reads_unmapped", models.BigIntegerField()),
                ("reads_properly_paired", models.BigIntegerField()),
                ("reads_paired", models.BigIntegerField()),
                ("reads_duplicated", models.BigIntegerField()),
                ("reads_mq_0", models.BigIntegerField()),
                ("reads_qc_failed", models.BigIntegerField()),
                ("non_primary_alignments", models.BigIntegerField()),
                ("total_length", models.BigIntegerField()),
                ("total_first_fragment_length", models.BigIntegerField()),
                ("total_last_fragment_length", models.BigIntegerField()),
                ("bases_mapped", models.BigIntegerField()),
                ("bases_mapped_cigar", models.BigIntegerField()),
                ("bases_trimmed", models.BigIntegerField()),
                ("bases_duplicated", models.BigIntegerField()),
                ("mismatches", models.BigIntegerField()),
                ("error_rate", models.FloatField()),
                ("average_length", models.IntegerField()),
                ("average_first_fragment_length", models.IntegerField()),
                ("average_last_fragment_length", models.IntegerField()),
                ("maximum_length", models.IntegerField()),
                ("maximum_first_fragment_length", models.IntegerField()),
                ("maximum_last_fragment_length", models.IntegerField()),
                ("average_quality", models.FloatField()),
                ("insert_size_average", models.FloatField()),
                ("insert_size_standard_deviation", models.FloatField()),
                ("inward_oriented_pairs", models.IntegerField()),
                ("outward_oriented_pairs", models.IntegerField()),
                ("pairs_with_other_orientation", models.IntegerField()),
                ("pairs_on_different_chromosomes", models.IntegerField()),
                ("percentage_of_properly_paired_reads", models.FloatField()),
                (
                    "sample",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="submission.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SmearMicroscopyResult",
            fields=[
                ("test_id", models.BigAutoField(primary_key=True, serialize=False)),
                ("smear_result", models.CharField(max_length=8192)),
                (
                    "sample",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="submission.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SequencingDataHash",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("algorithm", models.CharField(max_length=8192)),
                ("value", models.CharField(max_length=8192)),
                (
                    "sequencing_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hashes",
                        to="submission.sequencingdata",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SampleAlias",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("verdicts", models.JSONField(default=list)),
                ("name", models.CharField(max_length=2048)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("fastq_prefix", models.CharField(max_length=2048, null=True)),
                (
                    "match_source",
                    models.CharField(
                        choices=[
                            ("NO_MATCH", "No match found"),
                            ("FASTQ_UPLOADED", "Uploaded FASTQ file"),
                            (
                                "FASTQ_UPLOADED_NEW_SAMPLE",
                                "Uploaded FASTQ file, new sample",
                            ),
                            ("FASTQ_EXISTING", "Existing FASTQ file"),
                            ("NCBI", "NCBI"),
                            ("USER_ALIAS", "Existing user alias"),
                        ],
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "sampling_date",
                    django.contrib.postgres.fields.ranges.DateRangeField(null=True),
                ),
                (
                    "origin",
                    models.CharField(
                        choices=[
                            ("SRS", "Srs"),
                            ("BioSample", "Biosample"),
                            ("TBKB", "Tbkb"),
                        ],
                        default="TBKB",
                        max_length=128,
                    ),
                ),
                ("origin_label", models.CharField(default="", max_length=1024)),
                (
                    "country",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="genphen.country",
                    ),
                ),
                (
                    "package",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sample_aliases",
                        to="submission.package",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="aliases",
                        to="submission.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PDSTest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("concentration", models.FloatField(blank=True, null=True)),
                (
                    "test_result",
                    models.CharField(
                        choices=[("S", "S"), ("R", "R"), ("I", "I")],
                        max_length=1,
                        null=True,
                    ),
                ),
                ("staging", models.BooleanField(default=True)),
                (
                    "drug",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="pds_tests",
                        to="genphen.drug",
                    ),
                ),
                (
                    "medium",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="pds_tests",
                        to="genphen.growthmedium",
                    ),
                ),
                (
                    "method",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="pds_tests",
                        to="genphen.pdsassessmentmethod",
                    ),
                ),
                (
                    "package",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pds_tests",
                        to="submission.package",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pds_tests",
                        to="submission.sample",
                    ),
                ),
                (
                    "sample_alias",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pds_tests",
                        to="submission.samplealias",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "PDS Tests",
            },
        ),
        migrations.CreateModel(
            name="PackageStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cnt_mic_tests",
                    models.IntegerField(default=0, verbose_name="MIC tests count"),
                ),
                (
                    "cnt_pds_tests",
                    models.IntegerField(default=0, verbose_name="PDS tests count"),
                ),
                (
                    "cnt_pds_drug_concentration",
                    models.IntegerField(
                        default=0,
                        verbose_name="PDS drug/concentration combinations count",
                    ),
                ),
                ("list_mic_drugs", models.JSONField(default=list)),
                ("list_pds_drugs", models.JSONField(default=list)),
                (
                    "cnt_messages",
                    models.IntegerField(default=0, verbose_name="Chat messages count"),
                ),
                (
                    "cnt_sample_aliases",
                    models.IntegerField(default=0, verbose_name="Sample aliases count"),
                ),
                (
                    "cnt_samples_matched",
                    models.IntegerField(
                        default=0,
                        verbose_name="Matched samples count",
                    ),
                ),
                (
                    "cnt_samples_created",
                    models.IntegerField(
                        default=0,
                        verbose_name="Created samples count",
                    ),
                ),
                (
                    "cnt_sequencing_data",
                    models.IntegerField(
                        default=0,
                        verbose_name="Sequencing data files count",
                    ),
                ),
                (
                    "package",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stats",
                        to="submission.package",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="packagesequencingdata",
            name="sequencing_data",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assoc_packages",
                to="submission.sequencingdata",
            ),
        ),
        migrations.AddField(
            model_name="packagesequencingdata",
            name="sequencing_data_hash",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assoc_packages",
                to="submission.sequencingdatahash",
            ),
        ),
        migrations.CreateModel(
            name="MICTest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("plate", models.CharField(max_length=8192)),
                (
                    "range",
                    django.contrib.postgres.fields.ranges.DecimalRangeField(null=True),
                ),
                ("staging", models.BooleanField(default=True)),
                (
                    "drug",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="mic_tests",
                        to="genphen.drug",
                    ),
                ),
                (
                    "package",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mic_tests",
                        to="submission.package",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mic_tests",
                        to="submission.sample",
                    ),
                ),
                (
                    "sample_alias",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mic_tests",
                        to="submission.samplealias",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField(blank=True, max_length=2000, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "package",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="submission.package",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_messages",
                        to="identity.user",
                    ),
                ),
            ],
            options={
                "ordering": ("timestamp",),
            },
        ),
        migrations.CreateModel(
            name="MDRTest",
            fields=[
                ("test_id", models.BigAutoField(primary_key=True, serialize=False)),
                ("test_name", models.CharField(max_length=8192)),
                ("test_result", models.CharField(max_length=1)),
                (
                    "drug",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mdr_tests",
                        to="genphen.drug",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mdr_tests",
                        to="submission.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LocusSequencingStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("mean_depth", models.FloatField()),
                ("coverage_10x", models.FloatField()),
                ("coverage_15x", models.FloatField()),
                ("coverage_20x", models.FloatField()),
                ("coverage_30x", models.FloatField()),
                (
                    "gene_db_crossref",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="biosql.dbxref",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="submission.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GenotypeResistance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("variant", models.CharField(max_length=32768)),
                ("resistance_flag", models.CharField(max_length=10)),
                (
                    "drug",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="genotype_resistances",
                        to="genphen.drug",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="genotype_resistances",
                        to="submission.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Genotype",
            fields=[
                ("genotype_id", models.BigAutoField(primary_key=True, serialize=False)),
                ("genotyper", models.CharField(max_length=128)),
                ("quality", models.FloatField()),
                ("reference_ad", models.IntegerField()),
                ("alternative_ad", models.IntegerField()),
                ("total_dp", models.IntegerField()),
                ("genotype_value", models.CharField(max_length=128)),
                (
                    "sample",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="submission.sample",
                    ),
                ),
                (
                    "variant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genphen.variant",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Contributor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=1024)),
                ("last_name", models.CharField(max_length=1024)),
                ("role", models.CharField(max_length=1024)),
                (
                    "package",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contributors",
                        to="submission.package",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("MIC", "Mic"), ("PDS", "Pds"), ("OTHER", "Other")],
                        default="OTHER",
                        max_length=32,
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        upload_to=submission.models.attachment.uniq_name_attachment,
                    ),
                ),
                ("size", models.BigIntegerField(null=True)),
                ("original_filename", models.CharField(max_length=1024, null=True)),
                (
                    "package",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="submission.package",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="taxonomystats",
            constraint=models.UniqueConstraint(
                models.F("sample"),
                models.F("ncbi_taxon"),
                name="taxonomystats_sample_id_ncbi_taxon_id_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="sequencingdatahash",
            constraint=models.UniqueConstraint(
                models.F("sequencing_data"),
                models.F("algorithm"),
                models.F("value"),
                name="uc__sequencing_data_hash__sequencing_data__algorithm__value",
            ),
        ),
        migrations.AddIndex(
            model_name="sequencingdata",
            index=models.Index(
                django.db.models.functions.text.Upper("library_name"),
                name="sd__library_name__upper__idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="sequencingdata",
            constraint=models.UniqueConstraint(
                models.F("library_name"),
                models.F("file_path"),
                name="uc__sequencing_data__library_name__file_path",
            ),
        ),
        migrations.AddIndex(
            model_name="samplealias",
            index=models.Index(
                django.db.models.functions.text.Upper("name"),
                name="samplealias__name__upper__idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="samplealias",
            constraint=models.UniqueConstraint(
                models.F("package"),
                models.F("name"),
                name="uc__samplealias__package__name",
            ),
        ),
        migrations.AddConstraint(
            model_name="samplealias",
            constraint=models.UniqueConstraint(
                models.F("package"),
                models.F("fastq_prefix"),
                name="uc__samplealias__package__fastq_prefix",
            ),
        ),
        migrations.AddConstraint(
            model_name="packagesequencingdata",
            constraint=models.UniqueConstraint(
                models.F("package"),
                models.F("sequencing_data"),
                models.F("sequencing_data_hash"),
                name="uc__packagesequencingdata__package__sequencing_data__sequencingdatahash",
            ),
        ),
        migrations.AddIndex(
            model_name="package",
            index=models.Index(
                django.db.models.functions.text.Upper("origin"),
                name="package__origin__upper__idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="locussequencingstats",
            constraint=models.UniqueConstraint(
                models.F("sample"),
                models.F("gene_db_crossref"),
                name="locusseq_sample_dbxref_key",
            ),
        ),
        migrations.AddConstraint(
            model_name="genotype",
            constraint=models.UniqueConstraint(
                models.F("sample"),
                models.F("variant"),
                models.F("genotyper"),
                name="genotype_sample_id_variant_id_genotyper__key",
            ),
        ),
    ]
